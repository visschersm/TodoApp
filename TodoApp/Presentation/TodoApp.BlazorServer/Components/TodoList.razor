@using System.Net.Http
@using ViewModel = MTech.TodoApp.ViewModel
@using System.Text.Json
@inject HttpClient Http
@inject IModalService Modal

<div class="card" style="width: 18rem; margin:8px">
    <div class="card-header" style="color:white; background-color:@TodoListModel.LabelColor;">
        @TodoListModel.Title
    </div>
    <ul class="list-group list-group-flush">
        @foreach (var item in TodoListModel.TodoItems)
        {
            <TodoItem TodoItemModel="item" />
        }
    </ul>
    <div class="card-body">
        <button @onclick="@(() => ShowAddTodoItemModal(TodoListModel.Id))" class="btn btn-primary">New Todo</button>
    </div>
</div>

@code {
    [Parameter]
    public ViewModel.TodoList.ListView TodoListModel { get; set; }

    private static readonly string baseUrl = "https://localhost:5001/";
    private static readonly string todoUrl = baseUrl + "todo";

    private async Task ShowAddTodoItemModal(int parentId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Components.AddTodoItemModal.ParentId), parentId);

        var messageForm = Modal.Show<Components.AddTodoItemModal>("Add TodoItem", parameters);
        var result = await messageForm.Result;

        await UpdateTodoList();
    }

    private async Task UpdateTodoList()
    {
        var response = await Http.GetAsync($"{todoUrl}/{TodoListModel.Id}");
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();

            TodoListModel = await JsonSerializer.DeserializeAsync<ViewModel.TodoList.ListView>(responseStream, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });
        }
    }
}
