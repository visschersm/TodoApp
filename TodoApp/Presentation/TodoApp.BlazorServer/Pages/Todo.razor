@page "/todo"
@using System.Net.Http
@using ViewModel = MTech.TodoApp.ViewModel
@using System.Text.Json
@inject HttpClient Http

<h3>Todo</h3>

<ul>
    @foreach (var todo in _todoItems)
    {
        <li>
            @todo.Title
        </li>
    }
</ul>

<input placeholder="Add new todo" @bind="newTodo" />
<button @onclick="AddTodo">Add Todo</button>

@code {
    private IList<ViewModel.TodoItem.ListView> _todoItems = new List<ViewModel.TodoItem.ListView>();
    private string newTodo = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateTodoList();
    }

    private async Task UpdateTodoList()
    {
        var response = await Http.GetAsync("https://localhost:5001/todo");
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();

            _todoItems = await JsonSerializer.DeserializeAsync<ViewModel.TodoItem.ListView[]>(responseStream, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });
        }
    }

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(newTodo))
            return;

        var toCreate = new ViewModel.TodoItem.CreateView
        {
            Title = newTodo
        };

        var json = JsonSerializer.Serialize(toCreate);
        var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
        var response = await Http.PostAsync("https://localhost:5001/todo", data);
        string result = await response.Content.ReadAsStringAsync();

        newTodo = "";

        await UpdateTodoList();
    }

}
